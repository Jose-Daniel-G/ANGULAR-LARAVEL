import { HttpClient, HttpHeaders } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { BehaviorSubject, map, catchError, of } from "rxjs";
import { environment } from "../../environments/environment"; // Importar environment

@Injectable({
  providedIn: "root",
})
export class AuthenticationService {
  private isLoggedIn = new BehaviorSubject<boolean>(false);

  user: any;
  token: any = "";
  constructor(private http: HttpClient, private Router) {
    // TIENE QUE CARGARSE EL USUARIO Y EL TOKEN'
    this.loadStorage.getItem("user");
  }

  loadStorage() {
    if (localStorage.getItem("token")) {
      this.token = localStorage.getItem("token");
      this.user = JSON.parse(localStorage.getItem("user") ?? "");
    } else {
      this.token = "";
      this.user = null;
    }
  }
  // Toogle Loggedin
  toggleLogin(state: boolean): void {
    this.isLoggedIn.next(state);
  }

  // Status
  status() {
    const localData: any = localStorage.getItem("user");
    if (!localData) {
      this.isLoggedIn.next(false);
      console.log("User not logged in !!");
    } else {
      const userObj = JSON.parse(localData);
      const token_expires_at = new Date(userObj.token_expires_at);
      const current_date = new Date();
      if (token_expires_at > current_date) {
        this.isLoggedIn.next(true);
      } else {
        this.isLoggedIn.next(false);
        console.log("Token Expires!!");
      }
    }
    return this.isLoggedIn.asObservable();
  }

  // Login
  login(email: string, password: string) {
    const url = `${environment.URL_SERVICIOS}/login`;
    return this.http.post<any>(url, { email, password }).pipe(
      map((resp: any) => {
        if (resp.access_token) {
          return this.saveLocalStorageResponse(resp);
        } else {
          return resp;
        }
      }),
      catchError((err: any) => {
        return of(err);
      })
    );
  }
  saveLocalStorageResponse(resp: any): boolean {
    if (resp.access_token && resp.user) {
      localStorage.setItem("token", resp.access_token);
      localStorage.setItem("user", JSON.stringify(resp.user));
      this.user = resp.user;
      this.token = resp.access_token;
      return true;
    }
    return false;
  }
  // User Info
  // user() {
  //   const user: any = localStorage.getItem('user');
  //   const userObj = JSON.parse(user);

  //   const token = userObj.token;
  //   const headers = new HttpHeaders({
  //     Authorization: `Bearer ${token}`,
  //   });
  //   return this.http.get(`${environment.URL_SERVICIOS}/user`, { headers: headers });
  // }

  // Logout
  logout(allDevice: boolean) {
    const user: any = localStorage.getItem("user");
    const userObj = JSON.parse(user);

    const token = userObj.token;
    const headers = new HttpHeaders({
      Authorization: `Bearer ${token}`,
    });
    return this.http.post(
      `${environment.URL_SERVICIOS}/logout`,
      { allDevice: allDevice },
      { headers: headers }
    );
  }

  // Register
  register(
    name: string,
    email: string,
    password: string,
    password_confirmation: string
  ) {
    const data = {
      name: name,
      email: email,
      password: password,
      password_confirmation: password_confirmation,
    };
    return this.http.post(`${environment.URL_SERVICIOS}/register`, data);
  }

  // Forgot Pass
  forgot(email: string) {
    return this.http.post(`${environment.URL_SERVICIOS}/forgot`, {
      email: email,
    });
  }

  // Reset Pass
  reset(token: string, password: string, password_confirmation: string) {
    const data = {
      token: token,
      password: password,
      password_confirmation: password_confirmation,
    };
    return this.http.post(`${environment.URL_SERVICIOS}/reset`, data);
  }
}
